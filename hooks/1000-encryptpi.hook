#!/bin/bash

# encryptpi main hook call

##########
# Setup working area
echo "Attempting to run encryptpi ..."

# Test for qemu
if [ ! -f "/usr/bin/qemu-aarch64-static" ]; then
	echo "Can't find arm emulator. Attempting to install ..."
	apt-get -y install qemu-user-static binfmt-support
	if [ ! -f "/usr/bin/qemu-aarch64-static" ]; then
		echo "Still can't find arm emulator. Exiting ..."
		exit 1
	fi
fi

# Download arm image if we don't already have it
_IMAGENAME=$(basename ${_IMAGEURL})
if [ -f ${_BASEDIR}/config/${_IMAGENAME} ]; then
	echo "Awesome, ARM image ${_IMAGENAME} already exists. Skipping download!"
else
	echo "Downloading ARM image from ${_IMAGEURL} ..."
	wget ${_IMAGEURL} -O ${_BASEDIR}/config/${_IMAGENAME}
fi

# Extract files from image
mkdir ${_BUILDDIR}/root
mkdir ${_BUILDDIR}/mount
echo "Extracting image: ${_IMAGENAME} ..."
xz --decompress --stdout ${_BASEDIR}/config/${_IMAGENAME} > ${_BUILDDIR}/kali.img
echo "Mounting loopback ..."
loopdev=$(losetup -f --show ${_BUILDDIR}/kali.img)
partprobe ${loopdev}
# Extract root partition
mount ${loopdev}p2 ${_BUILDDIR}/mount
echo "Syncing image/root to ${_BUILDDIR}/root ..."
rsync -HPavz -q ${_BUILDDIR}/mount/ ${_BUILDDIR}/root/
umount ${_BUILDDIR}/mount
# Extract boot partition
mount ${loopdev}p1 ${_BUILDDIR}/mount/
echo "Syncing image/root/boot to ${_BUILDDIR}/root/boot ..."
rsync -HPavz -q ${_BUILDDIR}/mount/ ${_BUILDDIR}/root/boot/
umount ${_BUILDDIR}/mount
# Clear loopback
rmdir ${_BUILDDIR}/mount
echo "Cleaning loopback ..."
losetup -d ${loopdev}
rm ${_BUILDDIR}/kali.img

# Setup qemu emulator for aarch64
echo "Copying qemu emulator to chroot ..."
cp /usr/bin/qemu-aarch64-static ${_BUILDDIR}/root/usr/bin/

chroot ${_BUILDDIR}/root apt-get -y install cryptsetup busybox

# Tell pi to use initramfs
echo "initramfs initramfs.gz followkernel" >> ${_BUILDDIR}/root/boot/config.txt

##########
# Begin cryptsetup
echo "The encryptpi stage completed!"
# Update /boot/cmdline.txt to boot crypt
sed -i 's#root=/dev/mmcblk0p2#root=/dev/mapper/crypt cryptdevice=/dev/mmcblk0p2:crypt#g' ${_BUILDDIR}/root/boot/cmdline.txt
# Enable cryptsetup when building initramfs
echo "CRYPTSETUP=y" >> ${_BUILDDIR}/root/etc/cryptsetup-initramfs/conf-hook
# Update /etc/fstab
sed -i 's#/dev/mmcblk0p2#/dev/mapper/crypt#g' ${_BUILDDIR}/root/etc/fstab
# Update /etc/crypttab
echo "crypt /dev/mmcblk0p2 none luks" >> ${_BUILDDIR}/root/etc/crypttab
# Create a hook to include our crypttab in the initramfs
cat << "EOF" > ${_BUILDDIR}/root/etc/initramfs-tools/hooks/zz-cryptsetup
#!/bin/sh
if [ "$1" = "prereqs" ]; then exit 0; fi
. /usr/share/initramfs-tools/hook-functions
mkdir -p ${DESTDIR}/cryptroot || true
cat /etc/crypttab >> ${DESTDIR}/cryptroot/crypttab
EOF
chmod 755 ${_BUILDDIR}/root/etc/initramfs-tools/hooks/zz-cryptsetup
# Disable autoresize
chroot ${_BUILDDIR}/root systemctl disable rpiwiggle
rm ${_BUILDDIR}/root/root/scripts/rpi-wiggle.sh

echo "... encryptpi call completed!"

